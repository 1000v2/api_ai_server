"""
–°–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
"""

from typing import Dict, List, Any, Optional
from ai_api_server.providers.base import ModelInfo
from ai_api_server.modules.constants import MODEL_CATEGORIES


class ModelFilter:
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π."""
    
    def __init__(self, config: Dict[str, Any] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –º–æ–¥–µ–ª–µ–π.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ config.yaml
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.categories = {
            "text_generation": {
                "name": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞",
                "description": "–ú–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞",
                "keywords": ["gpt", "claude", "gemini", "llama", "chat", "completion"],
                "icon": "üí¨",
                "default": True
            }
        }
        
        if config:
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ config.yaml
            for filter_name, filter_config in config.items():
                category = filter_config.get("category", filter_name)
                keywords = filter_config.get("keywords", [])
                
                self.categories[category] = {
                    "name": filter_config.get("display_name", category.replace("_", " ").title()),
                    "description": filter_config.get("description", f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}"),
                    "keywords": [keyword.lower() for keyword in keywords],
                    "icon": filter_config.get("icon", "üîß")
                }
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        for category_info in self.categories.values():
            category_info["keywords"] = [kw.lower() for kw in category_info["keywords"]]
    
    def _build_categories(self) -> Dict[str, Dict[str, Any]]:
        """
        –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        
        Returns:
            Dict[str, Dict[str, Any]]: –°–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return self.categories
    
    def categorize_model(self, model: ModelInfo) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–æ–¥–µ–ª–∏.
        
        Args:
            model: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
            
        Returns:
            str: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–æ–¥–µ–ª–∏
        """
        model_name_lower = model.name.lower()
        model_id_lower = model.id.lower()
        model_desc_lower = (model.description or "").lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∫—Ä–æ–º–µ text_generation)
        for category_name, category_info in self.categories.items():
            if category_name == "text_generation":
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º text_generation, —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            keywords = category_info["keywords"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, ID –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–∏
            for keyword in keywords:
                if (keyword in model_name_lower or
                    keyword in model_id_lower or
                    keyword in model_desc_lower):
                    return category_name
        
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "text_generation" –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return "text_generation"
    
    def filter_models_by_category(self, models: List[ModelInfo], category: str) -> List[ModelInfo]:
        """
        –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
        
        Args:
            models: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
        Returns:
            List[ModelInfo]: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        """
        if category == "all":
            return models
        
        filtered_models = []
        for model in models:
            model_category = self.categorize_model(model)
            if model_category == category:
                filtered_models.append(model)
        
        return filtered_models
    
    def group_models_by_category(self, models: List[ModelInfo]) -> Dict[str, List[ModelInfo]]:
        """
        –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
        
        Args:
            models: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
            
        Returns:
            Dict[str, List[ModelInfo]]: –ú–æ–¥–µ–ª–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        """
        grouped = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category_name in self.categories.keys():
            grouped[category_name] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "other"
        grouped["other"] = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
        for model in models:
            category = self.categorize_model(model)
            if category not in grouped:
                grouped[category] = []
            grouped[category].append(model)
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        return {k: v for k, v in grouped.items() if v}
    
    def get_available_categories(self) -> List[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
        
        Returns:
            List[Dict[str, str]]: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        """
        categories = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category_name, category_info in self.categories.items():
            categories.append({
                "id": category_name,
                "name": category_info["name"],
                "keywords": category_info["keywords"]
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories.extend([
            {
                "id": "all",
                "name": "–í—Å–µ –º–æ–¥–µ–ª–∏",
                "keywords": []
            },
            {
                "id": "other",
                "name": "–ü—Ä–æ—á–∏–µ",
                "keywords": []
            }
        ])
        
        return categories
    
    def get_model_statistics_by_category(self, models: List[ModelInfo]) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
        
        Args:
            models: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
            
        Returns:
            Dict[str, int]: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        stats = {}
        grouped = self.group_models_by_category(models)
        
        for category, category_models in grouped.items():
            stats[category] = len(category_models)
        
        return stats
    
    def search_models(self, models: List[ModelInfo], query: str) -> List[ModelInfo]:
        """
        –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É.
        
        Args:
            models: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            List[ModelInfo]: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        """
        if not query:
            return models
        
        query_lower = query.lower()
        found_models = []
        
        for model in models:
            # –ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, ID –∏ –æ–ø–∏—Å–∞–Ω–∏–∏
            if (query_lower in model.name.lower() or
                query_lower in model.id.lower() or
                (model.description and query_lower in model.description.lower())):
                found_models.append(model)
        
        return found_models