"""
–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI API Server.
"""

from enum import Enum
from typing import Dict, List, Any

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –∏ —Å–µ—Ä–≤–∏—Å–µ
SERVICE_INFO = {
    "name": "AI API Server",
    "version": "1.0.0",
    "description": "–ú–æ–¥—É–ª—å–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏",
    "author": "AI API Server Team",
    "license": "MIT"
}

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
class EndpointType(Enum):
    """–¢–∏–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤."""
    TEXT_GENERATION = "text_generation"
    IMAGE_GENERATION = "image_generation"
    AUDIO_GENERATION = "audio_generation"
    TRANSCRIPTION = "transcription"
    VECTORIZATION = "vectorization"
    IMAGE_EDITING = "image_editing"
    SPEECH_TO_TEXT = "speech_to_text"
    TEXT_TO_SPEECH = "text_to_speech"
    EMBEDDINGS = "embeddings"
    MODERATION = "moderation"
    FINE_TUNING = "fine_tuning"


# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
SUPPORTED_ENDPOINTS = {
    "openai": [
        EndpointType.TEXT_GENERATION,
        EndpointType.IMAGE_GENERATION,
        EndpointType.TRANSCRIPTION,
        EndpointType.VECTORIZATION,
        EndpointType.IMAGE_EDITING,
        EndpointType.TEXT_TO_SPEECH,
        EndpointType.EMBEDDINGS,
        EndpointType.MODERATION,
        EndpointType.FINE_TUNING
    ],
    "gemini": [
        EndpointType.TEXT_GENERATION,
        EndpointType.VECTORIZATION,
        EndpointType.EMBEDDINGS
    ],
    "cody": [
        EndpointType.TEXT_GENERATION,
        EndpointType.IMAGE_GENERATION,
        EndpointType.AUDIO_GENERATION,
        EndpointType.IMAGE_EDITING
    ],
    "openrouter": [
        EndpointType.TEXT_GENERATION
    ]
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥–µ–ª–µ–π (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
MODEL_CATEGORIES = {
    "text_generation": {
        "name": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞",
        "description": "–ú–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞",
        "keywords": ["gpt", "claude", "gemini", "llama", "chat", "completion"],
        "icon": "üí¨",
        "default": True  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    },
    "image_generation": {
        "name": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç–∏–Ω–æ–∫",
        "description": "–ú–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        "keywords": ["dall-e", "imagen", "midjourney", "stable-diffusion", "image"],
        "icon": "üé®"
    },
    "audio_generation": {
        "name": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞—É–¥–∏–æ",
        "description": "–ú–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –∏ –º—É–∑—ã–∫–∏",
        "keywords": ["audio", "music", "sound", "tts", "voice"],
        "icon": "üéµ"
    },
    "transcription": {
        "name": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è",
        "description": "–ú–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç",
        "keywords": ["whisper", "transcription", "speech-to-text", "stt"],
        "icon": "üé§"
    },
    "vectorization": {
        "name": "–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
        "description": "–ú–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
        "keywords": ["embedding", "embed", "vector", "similarity"],
        "icon": "üî¢"
    },
    "image_editing": {
        "name": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫",
        "description": "–ú–æ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        "keywords": ["edit", "inpaint", "outpaint", "variation"],
        "icon": "‚úèÔ∏è"
    }
}

# –õ–∏–º–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
DEFAULT_RATE_LIMITS = {
    "openai": {
        "gpt-4": 10,
        "gpt-4-turbo": 10,
        "gpt-3.5-turbo": 60,
        "dall-e-3": 5,
        "dall-e-2": 10,
        "whisper-1": 50,
        "text-embedding-ada-002": 100
    },
    "gemini": {
        "models/gemini-pro": 60,
        "models/gemini-pro-vision": 60,
        "models/gemini-1.5-pro": 10,
        "models/gemini-1.5-flash": 100
    },
    "cody": {
        "gpt-4.1": 10,  # 10rpm —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        "gpt-4o": 10,
        "gpt-4o-mini": 10,
        "gpt-4o-mini-audio-preview": 5,
        "gpt-image-1": 5,
        "flux.1-kontext-pro": 5
    },
    "openrouter": {
        "openai/gpt-4-turbo": 20,
        "openai/gpt-3.5-turbo": 60,
        "anthropic/claude-3-opus": 10,
        "anthropic/claude-3-sonnet": 20,
        "google/gemini-pro": 60,
        "meta-llama/llama-2-70b-chat": 30,
        "mistralai/mistral-7b-instruct": 100,
        "cohere/command-r-plus": 20
    }
}

# –ö–æ–¥—ã –æ—à–∏–±–æ–∫ –ª–∏–º–∏—Ç–æ–≤
RATE_LIMIT_ERROR_CODES = {
    "openai": [429, "rate_limit_exceeded"],
    "gemini": [429, "RATE_LIMIT_EXCEEDED", "QUOTA_EXCEEDED"],
    "cody": [429, "rate_limit_exceeded", "too_many_requests"],
    "openrouter": [429, "rate_limit_exceeded", "quota_exceeded"]
}

# –í—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤ (–≤ —á–∞—Å–∞—Ö)
RATE_LIMIT_RESET_HOURS = {
    "openai": 24,  # –°–±—Ä–æ—Å –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    "gemini": 24,
    "default": 24
}

# –°—Ç–∞—Ç—É—Å—ã API –∫–ª—é—á–µ–π
class APIKeyStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã API –∫–ª—é—á–µ–π."""
    ACTIVE = "active"
    RATE_LIMITED = "rate_limited"
    QUOTA_EXCEEDED = "quota_exceeded"
    INVALID = "invalid"
    EXPIRED = "expired"
    DISABLED = "disabled"


# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏)
PROVIDER_PRIORITIES = {
    "openai": 1,
    "gemini": 2
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
DEFAULT_PROVIDER_CONFIG = {
    "enabled": True,
    "fetch_models_dynamically": True,
    "rate_limit_enabled": True,
    "key_rotation_enabled": True,
    "retry_attempts": 3,
    "retry_delay_seconds": 1,
    "health_check_interval_minutes": 5
}

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
SUPPORTED_FILE_FORMATS = {
    "audio": [".mp3", ".wav", ".m4a", ".ogg", ".flac"],
    "image": [".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp"],
    "document": [".txt", ".pdf", ".docx", ".md"]
}

# HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ã
HTTP_STATUS_CODES = {
    "SUCCESS": 200,
    "CREATED": 201,
    "BAD_REQUEST": 400,
    "UNAUTHORIZED": 401,
    "FORBIDDEN": 403,
    "NOT_FOUND": 404,
    "RATE_LIMITED": 429,
    "INTERNAL_ERROR": 500,
    "SERVICE_UNAVAILABLE": 503
}

# –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
ERROR_MESSAGES = {
    "NO_API_KEY": "API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}",
    "INVALID_API_KEY": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}",
    "RATE_LIMIT_EXCEEDED": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}",
    "QUOTA_EXCEEDED": "–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}",
    "MODEL_NOT_FOUND": "–ú–æ–¥–µ–ª—å {model} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}",
    "PROVIDER_UNAVAILABLE": "–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
    "INVALID_REQUEST": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {details}",
    "INTERNAL_ERROR": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {details}"
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOGGING_CONFIG = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "default": {
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        },
        "detailed": {
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s"
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "default",
            "level": "INFO"
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": "logs/app.log",
            "formatter": "detailed",
            "level": "DEBUG"
        }
    },
    "root": {
        "level": "INFO",
        "handlers": ["console", "file"]
    }
}

# –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
METRICS_CONFIG = {
    "enabled": True,
    "collect_interval_seconds": 60,
    "retention_days": 30,
    "metrics": [
        "requests_total",
        "requests_duration_seconds",
        "errors_total",
        "active_connections",
        "provider_availability",
        "model_usage_count",
        "tokens_processed_total"
    ]
}