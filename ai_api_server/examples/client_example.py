"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI API Server.
"""

import asyncio
import aiohttp
import json
from typing import Dict, Any


class AIAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI API Server."""
    
    def __init__(self, base_url: str = "http://localhost:8000/api/v1"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            base_url: –ë–∞–∑–æ–≤—ã–π URL API —Å–µ—Ä–≤–µ—Ä–∞
        """
        self.base_url = base_url
        self.session = None
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥."""
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥."""
        if self.session:
            await self.session.close()
    
    async def get_providers(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤."""
        async with self.session.get(f"{self.base_url}/providers") as response:
            return await response.json()
    
    async def get_models_by_provider(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º."""
        async with self.session.get(f"{self.base_url}/models") as response:
            return await response.json()
    
    async def get_models_by_category(self, category: str = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""
        url = f"{self.base_url}/models/by-category"
        if category:
            url += f"?category={category}"
        
        async with self.session.get(url) as response:
            return await response.json()
    
    async def search_models(self, query: str, provider: str = None) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π."""
        url = f"{self.base_url}/models/search?q={query}"
        if provider:
            url += f"&provider={provider}"
        
        async with self.session.get(url) as response:
            return await response.json()
    
    async def chat_completion(self, model: str, messages: list, **kwargs) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞."""
        data = {
            "model": model,
            "messages": messages,
            **kwargs
        }
        
        async with self.session.post(
            f"{self.base_url}/chat/completions",
            json=data
        ) as response:
            return await response.json()
    
    async def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        async with self.session.get(f"{self.base_url}/statistics") as response:
            return await response.json()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    
    async with AIAPIClient() as client:
        print("ü§ñ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI API Server\n")
        
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        print("1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
        providers = await client.get_providers()
        if providers.get("success"):
            for name, info in providers["providers"].items():
                status = "‚úÖ" if info["available"] else "‚ùå"
                print(f"   {status} {info['display_name']} - {info['description']}")
        print()
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        print("2Ô∏è‚É£ –ú–æ–¥–µ–ª–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:")
        models_by_provider = await client.get_models_by_provider()
        if models_by_provider.get("success"):
            for provider, models in models_by_provider["models"].items():
                print(f"   üì¶ {provider.upper()}: {len(models)} –º–æ–¥–µ–ª–µ–π")
                for model in models[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –º–æ–¥–µ–ª–∏
                    print(f"      - {model['name']} ({model['id']})")
                if len(models) > 3:
                    print(f"      ... –∏ –µ—â—ë {len(models) - 3} –º–æ–¥–µ–ª–µ–π")
        print()
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print("3Ô∏è‚É£ –ú–æ–¥–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        models_by_category = await client.get_models_by_category()
        if models_by_category.get("success"):
            for category, models in models_by_category["models"].items():
                print(f"   üè∑Ô∏è {category}: {len(models)} –º–æ–¥–µ–ª–µ–π")
        print()
        
        # 4. –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π
        print("4Ô∏è‚É£ –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π (–∑–∞–ø—Ä–æ—Å: 'gpt'):")
        search_results = await client.search_models("gpt")
        if search_results.get("success"):
            print(f"   –ù–∞–π–¥–µ–Ω–æ: {search_results['total_found']} –º–æ–¥–µ–ª–µ–π")
            for model in search_results["models"][:3]:
                print(f"   - {model['name']} ({model['id']})")
        print()
        
        # 5. –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏)
        print("5Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:")
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
            available_model = None
            if models_by_provider.get("success"):
                for provider, models in models_by_provider["models"].items():
                    if models:
                        # –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å
                        for model in models:
                            if any(keyword in model["id"].lower() for keyword in ["gpt", "gemini", "claude"]):
                                available_model = model["id"]
                                break
                        if available_model:
                            break
            
            if available_model:
                print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {available_model}")
                
                response = await client.chat_completion(
                    model=available_model,
                    messages=[
                        {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"}
                    ],
                    max_tokens=100
                )
                
                if response.get("success"):
                    chat_response = response["response"]
                    print(f"   –û—Ç–≤–µ—Ç: {chat_response['content']}")
                    print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response['response_time_ms']}–º—Å")
                else:
                    print(f"   –û—à–∏–±–∫–∞: {response}")
            else:
                print("   ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        print()
        
        # 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("6Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        stats = await client.get_statistics()
        if stats.get("success"):
            summary = stats["statistics"]["summary"]
            print(f"   üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {summary.get('total_requests', 0)}")
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {summary.get('successful_requests', 0)}")
            print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {summary.get('success_rate', 0):.1f}%")
            print(f"   üî§ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {summary.get('total_tokens', 0)}")
            
            popular_models = stats["statistics"].get("popular_models", [])
            if popular_models:
                print("   üèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
                for model in popular_models[:3]:
                    print(f"      - {model['model_id']} ({model['provider_name']}): {model['usage_count']} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")
        print()
        
        print("‚ú® –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


if __name__ == "__main__":
    asyncio.run(main())